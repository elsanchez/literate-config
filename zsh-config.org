* Zsh Configuration (Literate)

This is your cross-platform literate Zsh setup for Doom Emacs and powerlevel10k.
Supports Linux, macOS, and other Unix-like systems with automatic OS detection.

---

** Global Environment

#+PROPERTY: header-args :results none
#+begin_src shell :tangle ~/.zshrc
# OS Detection and Cross-Platform Setup
case "$(uname -s)" in
  Darwin*)
    export OS_TYPE="macos"
    ;;
  Linux*)
    export OS_TYPE="linux"
    ;;
  CYGWIN*|MINGW*|MSYS*)
    export OS_TYPE="windows"
    ;;
  ,*)
    export OS_TYPE="unknown"
    ;;
esac

# macOS Homebrew initialization based on architecture
if [[ "$OS_TYPE" == "macos" ]]; then
  case "$(uname -m)" in
    arm64)
      # Apple Silicon (M1/M2/M3) - Homebrew in /opt/homebrew
      if [[ -f "/opt/homebrew/bin/brew" ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
      fi
      ;;
    x86_64)
      # Intel Mac - Homebrew in /usr/local
      if [[ -f "/usr/local/bin/brew" ]]; then
        eval "$(/usr/local/bin/brew shellenv)"
      fi
      ;;
  esac
fi

# Instant Prompt loading for faster startup
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Oh My Zsh setup
export ZSH="$HOME/.oh-my-zsh"

# Check if Oh My Zsh exists
if [[ ! -d "$ZSH" ]]; then
  echo "⚠️  Oh My Zsh not found. Install it with:"
  echo "sh -c \"\$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\""
  return 1
fi

# Check if powerlevel10k theme exists
if [[ -d "$ZSH/custom/themes/powerlevel10k" ]]; then
  ZSH_THEME="powerlevel10k/powerlevel10k"
else
  echo "⚠️  Powerlevel10k theme not found. Install it with:"
  echo "git clone --depth=1 https://github.com/romkatv/powerlevel10k.git \$ZSH_CUSTOM/themes/powerlevel10k"
  ZSH_THEME="robbyrussell"  # Fallback theme
fi

# Check and setup plugins
declare -a available_plugins=()
declare -a missing_plugins=()

# Define desired plugins
desired_plugins=(git zsh-autosuggestions zsh-syntax-highlighting)

for plugin in "${desired_plugins[@]}"; do
  case $plugin in
    git)
      available_plugins+=($plugin)
      ;;
    zsh-autosuggestions)
      if [[ -d "$ZSH/custom/plugins/zsh-autosuggestions" ]]; then
        available_plugins+=($plugin)
      else
        missing_plugins+=($plugin)
      fi
      ;;
    zsh-syntax-highlighting)
      if [[ -d "$ZSH/custom/plugins/zsh-syntax-highlighting" ]]; then
        available_plugins+=($plugin)
      else
        missing_plugins+=($plugin)
      fi
      ;;
  esac
done

# Report missing plugins
if [[ ${#missing_plugins[@]} -gt 0 ]]; then
  echo "⚠️  Missing zsh plugins: ${missing_plugins[*]}"
  echo "Install missing plugins:"
  for plugin in "${missing_plugins[@]}"; do
    case $plugin in
      zsh-autosuggestions)
        echo "  git clone https://github.com/zsh-users/zsh-autosuggestions \$ZSH_CUSTOM/plugins/zsh-autosuggestions"
        ;;
      zsh-syntax-highlighting)
        echo "  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git \$ZSH_CUSTOM/plugins/zsh-syntax-highlighting"
        ;;
      direnv)
        echo "direnv: curl -sfL https://direnv.net/install.sh | bash"
        ;;
      uv)
        echo "uv:  curl -LsSf https://astral.sh/uv/install.sh | sh"
        ;;
    esac
  done
fi

# Set available plugins
plugins=(${available_plugins[@]})

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh

# Load Powerlevel10k configuration if available
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Load Linux-specific functions if not on macOS
if [[ "$OS_TYPE" != "macos" && -f "$HOME/.zsh_functions" ]]; then
  source "$HOME/.zsh_functions"
fi

# Load work-specific environment (macOS only, if exists)
if [[ "$OS_TYPE" == "macos" && -f "$HOME/.zsh_work_env" ]]; then
  source "$HOME/.zsh_work_env"
fi

# Set environment variables (cross-platform)
export EDITOR='emacs'
case "$OS_TYPE" in
  macos)
    export BROWSER='open'
    export TERM=xterm

    # Java JDK 17 (check if installed)
    if [[ -d "/Library/Java/JavaVirtualMachines/jdk-17.jdk" ]]; then
      export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home
    fi

    # Maven configuration (if installed via Homebrew)
    if command -v mvn >/dev/null 2>&1; then
      # Detect Maven version dynamically
      maven_version=$(mvn -version | head -1 | awk '{print $3}' 2>/dev/null)
      if [[ -n "$maven_version" && -d "/opt/homebrew/Cellar/maven/$maven_version" ]]; then
        export M3_HOME="/opt/homebrew/Cellar/maven/$maven_version"
        export M3="$M3_HOME/bin"
      fi
    fi

    # Oracle TNS configuration
    if [[ -d "$HOME/tools/instantclient_19_8/network/admin" ]]; then
      export TNS_ADMIN="$HOME/tools/instantclient_19_8/network/admin"
    fi
    ;;
  linux)
    export BROWSER='firefox'
    ;;
  ,*)
    export BROWSER='firefox'
    ;;
esac

# Setup npm environment
export PATH="$PATH:$HOME/.npm-global/bin"
export BAT_THEME="gruvbox-dark"

# OS-specific PATH additions
case "$OS_TYPE" in
  macos)
    # Doom Emacs (macOS uses ~/.emacs.d)
    [[ -d "$HOME/.emacs.d/bin" ]] && export PATH="$PATH:$HOME/.emacs.d/bin"

    # Python local packages and pipx
    [[ -d "$HOME/.local/bin" ]] && export PATH="$PATH:$HOME/.local/bin"

    # Rust/Cargo tools
    [[ -d "$HOME/.cargo/bin" ]] && export PATH="$PATH:$HOME/.cargo/bin"

    # OpenSSL (Homebrew)
    [[ -d "/opt/homebrew/opt/openssl@3/bin" ]] && export PATH="$PATH:/opt/homebrew/opt/openssl@3/bin"

    # Oracle SQLcl
    [[ -d "$HOME/bin/sqlcl/bin" ]] && export PATH="$PATH:$HOME/bin/sqlcl/bin"

    # Personal binaries
    [[ -d "$HOME/bin" ]] && export PATH="$PATH:$HOME/bin"

    # Go binaries (if GOPATH exists)
    [[ -n "$GOPATH" && -d "$GOPATH/bin" ]] && export PATH="$PATH:$GOPATH/bin"

    # pipx venvs (macOS)
    if [[ -d "$HOME/.local/pipx/venvs" ]]; then
      for venv_dir in "$HOME/.local/pipx/venvs"/*; do
        [[ -d "$venv_dir/bin" ]] && export PATH="$PATH:$venv_dir/bin"
      done
    fi
    ;;
  linux)
    # Doom Emacs (Linux uses ~/.config/emacs)
    [[ -d "$HOME/.config/emacs/bin" ]] && export PATH="$PATH:$HOME/.config/emacs/bin"

    # Python local packages and pipx
    [[ -d "$HOME/.local/bin" ]] && export PATH="$PATH:$HOME/.local/bin"

    # pipx venvs (Linux)
    if [[ -d "$HOME/.local/share/pipx/venvs" ]]; then
      for venv_dir in "$HOME/.local/share/pipx/venvs"/*; do
        [[ -d "$venv_dir/bin" ]] && export PATH="$PATH:$venv_dir/bin"
      done
    fi

    # Linux specific paths
    [[ -d "/opt/nvim-linux-x86_64/bin" ]] && export PATH="$PATH:/opt/nvim-linux-x86_64/bin"
    ;;
esac

# Cross-platform aliases based on OS
case "$OS_TYPE" in
  macos)
    # macOS specific aliases
    alias gh="history | grep"
    # Use native macOS 'open' command for file manager
    ;;
  linux)
    # Linux specific aliases
    alias api='sudo apt-get install'
    alias apr='sudo apt-get remove'
    alias aps='apt-cache search'
    alias apu='sudo apt-get update && sudo apt-get upgrade'
    alias apc='sudo apt-get autoremove'
    alias pinfo='apt show'
    alias restart-audio='systemctl --user restart pipewire pipewire-pulse wireplumber || (pulseaudio -k && pulseaudio --start)'
    alias open='xdg-open'
    
    # Clipboard aliases for macOS compatibility
    if command -v xclip >/dev/null 2>&1; then
      alias pbcopy='xclip -selection clipboard'
      alias pbpaste='xclip -selection clipboard -o'
    elif command -v xsel >/dev/null 2>&1; then
      alias pbcopy='xsel --clipboard --input'
      alias pbpaste='xsel --clipboard --output'
    fi
    ;;
  ,*)
    # Default/unknown OS
    echo "Unknown OS, some aliases may not work"
    ;;
esac

# Golang environment
if [[ -d "/usr/local/go/bin" ]]; then
  export PATH=$PATH:/usr/local/go/bin
  export GOPATH=$HOME/go
  export PATH=$PATH:$GOPATH/bin
fi

# Aliases
# Navigation and general
alias ll='ls -lh --color=auto'
alias la='ls -lAh --color=auto'
alias gs='git status'


if [[ "$OS_TYPE" == "macos" ]]; then
  case "$(uname -m)" in
    arm64)
      # Apple Silicon (M1/M2/M3) - Homebrew in /opt/homebrew
      if [[ -f "/opt/homebrew/bin/brew" ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
      fi
      ;;
    x86_64)
      # Intel Mac - Homebrew in /usr/local
      if [[ -f "/usr/local/bin/brew" ]]; then
        eval "$(/usr/local/bin/brew shellenv)"
      fi
      ;;
  esac
fi

# General options
#setopt correct
setopt autocd
setopt extended_glob

# Completion system
autoload -Uz compinit && compinit

# Create a directory and move into it
mkcd() {
  mkdir -p "$1" && cd "$1"
}

# Quickly navigate up N directories
up() {
  local d=""
  limit=$1
  for ((i=1; i<=limit; i++)); do
    d="../$d"
  done
  cd "$d"
}

# Open current directory in Dolphin
# Open a file quickly with Emacs
e() {
  emacs -nw "$@"
}

# Lista y selecciona una sesión tmux con fzf
tms() {
  if ! command -v tmux >/dev/null 2>&1; then
    echo "❌ tmux not found. Install with: pi tmux"
    return 1
  fi

  if ! command -v fzf >/dev/null 2>&1; then
    echo "❌ fzf not found. Install with: pi fzf"
    return 1
  fi

  local session
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --prompt="🔍 Tmux session: ")

  if [ -n "$session" ]; then
    tmux attach-session -t "$session"
  else
    echo "❌ No session selected."
  fi
}

# Crea o conecta a una sesión (por nombre o default)
tmgo() {
  if ! command -v tmux >/dev/null 2>&1; then
    echo "❌ tmux not found. Install with: pi tmux"
    return 1
  fi

  local session="${1:-default}"
  tmux has-session -t "$session" 2>/dev/null

  if [ $? != 0 ]; then
    echo "📦 Creating session '$session'"
    tmux new-session -s "$session"
  else
    echo "🔄 Attaching to session '$session'"
    tmux attach-session -t "$session"
  fi
}

# Mata sesión desde fzf
tmkill() {
  if ! command -v tmux >/dev/null 2>&1; then
    echo "❌ tmux not found. Install with: pi tmux"
    return 1
  fi

  if ! command -v fzf >/dev/null 2>&1; then
    echo "❌ fzf not found. Install with: pi fzf"
    return 1
  fi

  local session
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --prompt="❌ Kill session: ")

  if [ -n "$session" ]; then
    tmux kill-session -t "$session"
    echo "💥 Session '$session' killed."
  else
    echo "❌ No session selected."
  fi
}

# Enhanced Configuration management with symlinks and versioning
config-backup() {
  local backup_dir="$HOME/.config-backups"
  local timestamp=$(date +"%Y%m%d_%H%M%S")

  echo "📦 Creating configuration backup..."
  mkdir -p "$backup_dir"

  # Initialize git repo if it doesn't exist
  if [[ ! -d "$backup_dir/.git" ]]; then
    cd "$backup_dir"
    git init
    git config user.name "Config Backup"
    git config user.email "backup@localhost"
    echo "✅ Initialized backup repository"
  fi

  cd "$backup_dir"

  # Copy current configs with better organization
  echo "💾 Backing up configurations..."
  [[ -f ~/.zshrc ]] && cp ~/.zshrc "zshrc_$timestamp"
  [[ -d ~/.config/doom ]] && cp -r ~/.config/doom "doom_$timestamp"
  [[ -f ~/.p10k.zsh ]] && cp ~/.p10k.zsh "p10k_$timestamp.zsh"

  # Commit backup
  git add .
  git commit -m "Backup $timestamp" >/dev/null 2>&1

  echo "✅ Backup created: $timestamp"
  echo "📁 Location: $backup_dir"
}

# Enhanced system with symlinks and proper versioning
config-init-dotfiles() {
  echo "🔗 Initializing dotfiles repository with symlinks..."

  local dotfiles_dir="$HOME/.dotfiles"
  local config_source="$HOME/org/literate-config"

  # Create dotfiles directory
  mkdir -p "$dotfiles_dir"
  cd "$dotfiles_dir"

  # Initialize git repo if needed
  if [[ ! -d ".git" ]]; then
    git init
    git config user.name "$(git config --global user.name || echo 'Config Manager')"
    git config user.email "$(git config --global user.email || echo 'config@localhost')"
    echo "✅ Initialized dotfiles repository"
  fi

  # Create directory structure
  mkdir -p doom zsh scripts backups

  # Move existing configs to dotfiles repo (if they exist)
  echo "📁 Organizing configuration files..."

  # Handle .zshrc
  if [[ -f ~/.zshrc && ! -L ~/.zshrc ]]; then
    echo "💾 Moving ~/.zshrc to dotfiles repo..."
    mv ~/.zshrc "$dotfiles_dir/zsh/zshrc"
    git add zsh/zshrc
  fi

  # Handle .p10k.zsh
  if [[ -f ~/.p10k.zsh && ! -L ~/.p10k.zsh ]]; then
    echo "💾 Moving ~/.p10k.zsh to dotfiles repo..."
    mv ~/.p10k.zsh "$dotfiles_dir/zsh/p10k.zsh"
    git add zsh/p10k.zsh
  fi

  # Handle doom config
  if [[ -d ~/.config/doom && ! -L ~/.config/doom ]]; then
    echo "💾 Moving ~/.config/doom to dotfiles repo..."
    mv ~/.config/doom "$dotfiles_dir/doom/config"
    git add doom/
  fi

  # Initial commit
  if git status --porcelain | grep -q .; then
    git commit -m "Initial dotfiles setup - moved existing configs"
    echo "✅ Initial dotfiles commit created"
  fi

  echo "🔗 Setting up symlinks..."
  config-create-symlinks
}

config-create-symlinks() {
  local dotfiles_dir="$HOME/.dotfiles"

  if [[ ! -d "$dotfiles_dir" ]]; then
    echo "❌ Dotfiles directory not found. Run config-init-dotfiles first."
    return 1
  fi

  echo "🔗 Creating symbolic links..."

  # Create necessary directories
  mkdir -p ~/.config

  # Symlink zsh files
  if [[ -f "$dotfiles_dir/zsh/zshrc" ]]; then
    [[ -L ~/.zshrc ]] && rm ~/.zshrc
    [[ -f ~/.zshrc ]] && mv ~/.zshrc ~/.zshrc.backup.$(date +%Y%m%d_%H%M%S)
    ln -sf "$dotfiles_dir/zsh/zshrc" ~/.zshrc
    echo "✅ Linked ~/.zshrc"
  fi

  if [[ -f "$dotfiles_dir/zsh/p10k.zsh" ]]; then
    [[ -L ~/.p10k.zsh ]] && rm ~/.p10k.zsh
    [[ -f ~/.p10k.zsh ]] && mv ~/.p10k.zsh ~/.p10k.zsh.backup.$(date +%Y%m%d_%H%M%S)
    ln -sf "$dotfiles_dir/zsh/p10k.zsh" ~/.p10k.zsh
    echo "✅ Linked ~/.p10k.zsh"
  fi

  # Symlink doom config
  if [[ -d "$dotfiles_dir/doom/config" ]]; then
    [[ -L ~/.config/doom ]] && rm ~/.config/doom
    [[ -d ~/.config/doom ]] && mv ~/.config/doom ~/.config/doom.backup.$(date +%Y%m%d_%H%M%S)
    ln -sf "$dotfiles_dir/doom/config" ~/.config/doom
    echo "✅ Linked ~/.config/doom"
  fi

  echo "🔗 Symlinks created successfully!"
}

config-sync-to-dotfiles() {
  echo "🔄 Syncing generated configs to dotfiles repository..."

  local dotfiles_dir="$HOME/.dotfiles"
  local config_source="$HOME/org/literate-config"

  if [[ ! -d "$dotfiles_dir" ]]; then
    echo "❌ Dotfiles directory not found. Run config-init-dotfiles first."
    return 1
  fi

  cd "$dotfiles_dir"

  # Copy latest generated configs
  echo "📋 Copying generated configurations..."

  # Copy zshrc if it's not a symlink (i.e., freshly generated)
  if [[ -f ~/.zshrc && ! -L ~/.zshrc ]]; then
    cp ~/.zshrc zsh/zshrc
    echo "✅ Synced .zshrc"
  elif [[ -L ~/.zshrc ]]; then
    echo "ℹ️  .zshrc is already symlinked"
  fi

  # Copy doom config if it's not a symlink
  if [[ -d ~/.config/doom && ! -L ~/.config/doom ]]; then
    rm -rf doom/config
    cp -r ~/.config/doom doom/config
    echo "✅ Synced doom config"
  elif [[ -L ~/.config/doom ]]; then
    echo "ℹ️  doom config is already symlinked"
  fi

  # Copy p10k config
  if [[ -f ~/.p10k.zsh && ! -L ~/.p10k.zsh ]]; then
    cp ~/.p10k.zsh zsh/p10k.zsh
    echo "✅ Synced .p10k.zsh"
  elif [[ -L ~/.p10k.zsh ]]; then
    echo "ℹ️  .p10k.zsh is already symlinked"
  fi

  # Commit changes
  if git status --porcelain | grep -q .; then
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    git add .
    git commit -m "Sync configs $timestamp - $(git status --porcelain | wc -l) files changed"
    echo "✅ Changes committed to dotfiles repo"
  else
    echo "ℹ️  No changes to commit"
  fi
}

config-status() {
  echo "📊 Configuration status:"

  local dotfiles_dir="$HOME/.dotfiles"

  # Check if dotfiles repo exists
  if [[ -d "$dotfiles_dir/.git" ]]; then
    echo "✅ Dotfiles repository: $dotfiles_dir"
    cd "$dotfiles_dir"
    echo "📋 Repository status:"
    git log --oneline -5 | sed 's/^/  /'
  else
    echo "❌ No dotfiles repository found"
    echo "💡 Run 'config-init-dotfiles' to set up"
  fi

  echo ""
  echo "🔗 Symlink status:"

  # Check symlinks
  if [[ -L ~/.zshrc ]]; then
    echo "✅ ~/.zshrc → $(readlink ~/.zshrc)"
  else
    echo "❌ ~/.zshrc is not a symlink"
  fi

  if [[ -L ~/.p10k.zsh ]]; then
    echo "✅ ~/.p10k.zsh → $(readlink ~/.p10k.zsh)"
  else
    echo "❌ ~/.p10k.zsh is not a symlink"
  fi

  if [[ -L ~/.config/doom ]]; then
    echo "✅ ~/.config/doom → $(readlink ~/.config/doom)"
  else
    echo "❌ ~/.config/doom is not a symlink"
  fi

  # Check backup system
  local backup_dir="$HOME/.config-backups"
  if [[ -d "$backup_dir/.git" ]]; then
    echo ""
    echo "💾 Backup system: active ($backup_dir)"
  else
    echo ""
    echo "⚠️  Backup system: not initialized"
  fi
}

config-restore() {
  local backup_dir="$HOME/.config-backups"

  if [[ ! -d "$backup_dir/.git" ]]; then
    echo "❌ No backup repository found. Run config-backup first."
    return 1
  fi

  if ! command -v fzf >/dev/null 2>&1; then
    echo "❌ fzf required for interactive restore. Install with: pi fzf"
    return 1
  fi

  cd "$backup_dir"

  # List available backups
  local backup_list=$(git log --oneline --format="%h %s" | head -20)

  if [[ -z "$backup_list" ]]; then
    echo "❌ No backups available"
    return 1
  fi

  echo "Available backups:"
  local selected=$(echo "$backup_list" | fzf --prompt="Select backup to restore: ")

  if [[ -z "$selected" ]]; then
    echo "❌ No backup selected"
    return 1
  fi

  local commit_hash=$(echo "$selected" | awk '{print $1}')

  echo "🔄 Restoring configuration from backup: $selected"
  echo "⚠️  This will overwrite current configurations. Continue? (y/N)"
  read -r confirm

  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    # Create current backup before restore
    config-backup

    # Find files from selected commit
    git show --name-only "$commit_hash" | while read -r file; do
      if [[ "$file" =~ ^zshrc_ ]]; then
        git show "$commit_hash:$file" > ~/.zshrc
        echo "✅ Restored ~/.zshrc"
      elif [[ "$file" =~ ^p10k_ ]]; then
        git show "$commit_hash:$file" > ~/.p10k.zsh
        echo "✅ Restored ~/.p10k.zsh"
      fi
    done

    echo "✅ Configuration restored successfully"
    echo "🔄 Reload your shell: source ~/.zshrc"
  else
    echo "❌ Restore cancelled"
  fi
}

config-list-backups() {
  local backup_dir="$HOME/.config-backups"

  if [[ ! -d "$backup_dir/.git" ]]; then
    echo "❌ No backup repository found"
    return 1
  fi

  cd "$backup_dir"
  echo "📋 Available configuration backups:"
  git log --oneline --format="%C(yellow)%h%C(reset) %C(green)%ad%C(reset) %s" --date=short | head -10
}

# Validation functions
validate-zsh-config() {
  local config_file="${1:-$HOME/.zshrc}"

  if [[ ! -f "$config_file" ]]; then
    echo "❌ Config file not found: $config_file"
    return 1
  fi

  echo "🔍 Validating zsh configuration..."

  # Basic syntax check
  if ! zsh -n "$config_file" 2>/dev/null; then
    echo "❌ Syntax errors found in $config_file"
    zsh -n "$config_file"
    return 1
  fi

  echo "✅ Zsh syntax validation passed"
  return 0
}

validate-doom-config() {
  local doom_dir="${1:-$HOME/.config/doom}"

  if [[ ! -d "$doom_dir" ]]; then
    echo "❌ Doom config directory not found: $doom_dir"
    return 1
  fi

  echo "🔍 Validating Doom Emacs configuration..."

  local doom_bin=$(command -v doom || echo "$HOME/.config/emacs/bin/doom")

  if [[ ! -x "$doom_bin" ]]; then
    echo "❌ Doom binary not found or not executable"
    return 1
  fi

  # Run doom doctor to check for issues
  if ! "$doom_bin" doctor >/dev/null 2>&1; then
    echo "⚠️  Doom doctor found issues:"
    "$doom_bin" doctor
    return 1
  fi

  echo "✅ Doom configuration validation passed"
  return 0
}

# Enhanced Doom Emacs testing functions
validate-elisp-syntax() {
  local file="$1"

  if [[ ! -f "$file" ]]; then
    echo "❌ File not found: $file"
    return 1
  fi

  echo "🔍 Validating Emacs Lisp syntax: $(basename "$file")"

  # Check syntax using emacs batch mode
  if ! emacs --batch --eval "(progn (find-file \"$file\") (emacs-lisp-mode) (check-parens))" 2>/dev/null; then
    echo "❌ Syntax errors found in $file"
    return 1
  fi

  echo "✅ Emacs Lisp syntax validation passed"
  return 0
}

doom-test-config() {
  echo "🧪 Testing Doom Emacs configuration in isolated environment..."

  local test_dir="$HOME/.doom-test"
  local config_dir="~/org/literate-config"
  local timestamp=$(date +"%Y%m%d_%H%M%S")

  # Create isolated test environment
  echo "📁 Creating test environment: $test_dir"
  rm -rf "$test_dir"
  mkdir -p "$test_dir"

  # Tangle configurations to test directory
  echo "🔧 Tangling configurations to test environment..."
  cd "$config_dir"

  # Create temporary org files that tangle to test directory
  local temp_dir=$(mktemp -d)

  for org_file in doom-config.org; do
    if [[ -f "$org_file" ]]; then
      echo "Processing $org_file..."
      # Create modified version that tangles to test directory
      sed "s|~/.config/doom|$test_dir|g" "$org_file" > "$temp_dir/test_$org_file"

      # Tangle to test directory
      emacs --batch -l org --eval "(progn (find-file \"$temp_dir/test_$org_file\") (org-babel-tangle))"
    fi
  done

  # Validate generated files
  echo "🔍 Validating generated configuration files..."
  local validation_passed=true

  for elisp_file in "$test_dir"/*.el; do
    if [[ -f "$elisp_file" ]]; then
      if ! validate-elisp-syntax "$elisp_file"; then
        validation_passed=false
      fi
    fi
  done

  if [[ "$validation_passed" == "false" ]]; then
    echo "❌ Configuration validation failed"
    echo "📁 Test files available at: $test_dir"
    rm -rf "$temp_dir"
    return 1
  fi

  # Test doom sync in isolated environment
  echo "🔄 Testing doom sync with test configuration..."
  local doom_bin=$(command -v doom || echo "$HOME/.config/emacs/bin/doom")

  if [[ -x "$doom_bin" ]]; then
    # Set DOOMDIR to test directory
    DOOMDIR="$test_dir" "$doom_bin" sync --force 2>/dev/null
    if [[ $? -eq 0 ]]; then
      echo "✅ Doom sync test passed"
    else
      echo "❌ Doom sync test failed"
      echo "📁 Test files available at: $test_dir"
      rm -rf "$temp_dir"
      return 1
    fi
  else
    echo "⚠️  Doom binary not found, skipping sync test"
  fi

  echo "✅ All tests passed! Configuration is safe to deploy"
  echo "🧹 Cleaning up test environment..."
  rm -rf "$test_dir" "$temp_dir"

  return 0
}

doom-stage-config() {
  echo "🎭 Staging Doom Emacs configuration for testing..."

  local staging_dir="$HOME/.doom-staging"
  local config_dir="~/org/literate-config"
  local backup_dir="$HOME/.config/doom.backup.$(date +%Y%m%d_%H%M%S)"

  # Create staging directory
  mkdir -p "$staging_dir"

  # Backup current config
  if [[ -d "$HOME/.config/doom" ]]; then
    echo "💾 Backing up current configuration to: $backup_dir"
    cp -r "$HOME/.config/doom" "$backup_dir"
  fi

  # Tangle to staging
  echo "🔧 Tangling to staging directory..."
  cd "$config_dir"

  # Create temporary org files that tangle to staging
  local temp_dir=$(mktemp -d)

  for org_file in doom-config.org; do
    if [[ -f "$org_file" ]]; then
      sed "s|~/.config/doom|$staging_dir|g" "$org_file" > "$temp_dir/staging_$org_file"
      emacs --batch -l org --eval "(progn (find-file \"$temp_dir/staging_$org_file\") (org-babel-tangle))"
    fi
  done

  # Replace current config with staging
  rm -rf "$HOME/.config/doom"
  mv "$staging_dir" "$HOME/.config/doom"

  echo "✅ Configuration staged! Test it now."
  echo "💡 To rollback: mv '$backup_dir' '$HOME/.config/doom'"
  echo "💡 To keep changes: rm -rf '$backup_dir'"

  rm -rf "$temp_dir"
}

doom-rollback() {
  echo "🔄 Rolling back Doom configuration..."

  # Find latest backup
  local latest_backup=$(ls -1d "$HOME/.config/doom.backup."* 2>/dev/null | tail -1)

  if [[ -z "$latest_backup" ]]; then
    echo "❌ No backup found to rollback to"
    return 1
  fi

  echo "📁 Rolling back to: $latest_backup"
  rm -rf "$HOME/.config/doom"
  mv "$latest_backup" "$HOME/.config/doom"

  echo "✅ Rollback completed"
}

doom-list-backups() {
  echo "📋 Available Doom configuration backups:"
  ls -1td "$HOME/.config/doom.backup."* 2>/dev/null | head -10 | while read backup; do
    local timestamp=$(basename "$backup" | sed 's/doom.backup.//')
    local size=$(du -sh "$backup" 2>/dev/null | cut -f1)
    echo "  📁 $timestamp ($size)"
  done

  if ! ls "$HOME/.config/doom.backup."* >/dev/null 2>&1; then
    echo "  No backups found"
  fi
}

# Emacs daemon management functions
emacs-restart() {
  echo "🔄 Restarting Emacs daemon..."

  case "$OS_TYPE" in
    linux)
      # Try systemd service first on Linux
      if command -v systemctl >/dev/null 2>&1 && systemctl --user is-active emacs.service >/dev/null 2>&1; then
        echo "📋 Using systemd service..."
        systemctl --user restart emacs.service
        sleep 2
        if systemctl --user is-active emacs.service >/dev/null 2>&1; then
          echo "✅ Emacs daemon restarted successfully"
        else
          echo "❌ Systemd restart failed, trying manual restart..."
          emacs-restart-manual
        fi
      else
        echo "📋 Systemd not available, using manual restart..."
        emacs-restart-manual
      fi
      ;;
    macos)
      # On macOS, use manual restart (no systemd)
      echo "📋 Using manual restart (macOS)..."
      emacs-restart-manual
      ;;
    ,*)
      # Default to manual restart for unknown OS
      echo "📋 Using manual restart (unknown OS)..."
      emacs-restart-manual
      ;;
  esac

  # Offer to open new frame
  echo -n "🖼️ Open new Emacs frame? (y/N): "
  read -r response
  if [[ "$response" =~ ^[Yy]$ ]]; then
    emacs-frame
  fi
}

emacs-restart-manual() {
  echo "💀 Stopping current daemon..."
  pkill -f 'emacs.*--daemon' 2>/dev/null || emacsclient -e '(kill-emacs)' 2>/dev/null
  sleep 2

  echo "🚀 Starting new daemon..."
  emacs --daemon
  sleep 3

  if pgrep -f 'emacs.*--daemon' >/dev/null; then
    echo "✅ Daemon restarted successfully"
  else
    echo "❌ Failed to start daemon"
    echo "💡 Try manually: emacs --daemon"
  fi
}

emacs-frame() {
  echo "🖼️ Opening new Emacs frame..."
  if command -v emacsclient >/dev/null 2>&1; then
    if emacsclient -c >/dev/null 2>&1; then
      echo "✅ New frame opened"
    else
      echo "❌ Failed to open frame"
      echo "💡 Make sure daemon is running: emacs --daemon"
    fi
  else
    echo "❌ emacsclient not found"
  fi
}

emacs-status() {
  echo "📊 Emacs daemon status:"

  # Check systemd service
  if command -v systemctl >/dev/null 2>&1; then
    local service_status=$(systemctl --user is-active emacs.service 2>/dev/null)
    echo "🔧 Systemd service: $service_status"
  fi

  # Check daemon process
  if pgrep -f 'emacs.*--daemon' >/dev/null; then
    echo "🟢 Daemon process: running"
    local pid=$(pgrep -f 'emacs.*--daemon')
    echo "📋 PID: $pid"
  else
    echo "🔴 Daemon process: not running"
  fi

  # Check if client can connect
  if command -v emacsclient >/dev/null 2>&1; then
    if emacsclient -e 't' >/dev/null 2>&1; then
      echo "🟢 Client connection: OK"
    else
      echo "🔴 Client connection: failed"
    fi
  fi
}

emacs-kill() {
  echo "💀 Stopping Emacs daemon..."

  # Try graceful shutdown first
  if command -v emacsclient >/dev/null 2>&1; then
    echo "🤝 Attempting graceful shutdown..."
    if emacsclient -e '(kill-emacs)' >/dev/null 2>&1; then
      echo "✅ Daemon stopped gracefully"
      return 0
    fi
  fi

  # Try systemd service
  if systemctl --user is-active emacs.service >/dev/null 2>&1; then
    echo "🔧 Stopping systemd service..."
    systemctl --user stop emacs.service
    echo "✅ Service stopped"
    return 0
  fi

  # Force kill as last resort
  echo "⚡ Force killing daemon process..."
  if pkill -f 'emacs.*--daemon'; then
    echo "✅ Daemon process killed"
  else
    echo "❌ No daemon process found"
  fi
}

# Dependency checking and installation utilities
check-dependencies() {
  echo "🔍 Checking system dependencies for literate config..."

  local missing_tools=()
  local missing_zsh_plugins=()

  # Essential tools
  local essential_tools=(git emacs zsh make curl)
  for tool in "${essential_tools[@]}"; do
    if ! command -v "$tool" >/dev/null 2>&1; then
      missing_tools+=("$tool")
    fi
  done

  # Optional but recommended tools
  local optional_tools=(fzf tmux direnv uv pipx)
  for tool in "${optional_tools[@]}"; do
    if ! command -v "$tool" >/dev/null 2>&1; then
      missing_tools+=("$tool (optional)")
    fi
  done

  # Zsh plugins
  if [[ -d "$ZSH" ]]; then
    [[ ! -d "$ZSH/custom/plugins/zsh-autosuggestions" ]] && missing_zsh_plugins+=("zsh-autosuggestions")
    [[ ! -d "$ZSH/custom/plugins/zsh-syntax-highlighting" ]] && missing_zsh_plugins+=("zsh-syntax-highlighting")
    [[ ! -d "$ZSH/custom/themes/powerlevel10k" ]] && missing_zsh_plugins+=("powerlevel10k")
  fi

  # Report findings
  if [[ ${#missing_tools[@]} -eq 0 && ${#missing_zsh_plugins[@]} -eq 0 ]]; then
    echo "✅ All dependencies are installed!"
  else
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
      echo "⚠️  Missing tools: ${missing_tools[*]}"
    fi
    if [[ ${#missing_zsh_plugins[@]} -gt 0 ]]; then
      echo "⚠️  Missing zsh plugins: ${missing_zsh_plugins[*]}"
    fi
    echo ""
    echo "💡 Run 'install-dependencies' to install missing components"
  fi
}

install-dependencies() {
  echo "🔧 Installing missing dependencies..."

  # Install system packages based on OS
  local packages=()
  ! command -v git >/dev/null 2>&1 && packages+=(git)
  ! command -v emacs >/dev/null 2>&1 && packages+=(emacs)
  ! command -v zsh >/dev/null 2>&1 && packages+=(zsh)
  ! command -v make >/dev/null 2>&1 && packages+=(make)
  ! command -v curl >/dev/null 2>&1 && packages+=(curl)
  ! command -v fzf >/dev/null 2>&1 && packages+=(fzf)
  ! command -v tmux >/dev/null 2>&1 && packages+=(tmux)
  ! command -v direnv >/dev/null 2>&1 && packages+=(direnv)
  ! command -v pipx >/dev/null 2>&1 && packages+=(pipx)

  if [[ ${#packages[@]} -gt 0 ]]; then
    echo "📦 Installing system packages: ${packages[*]}"
    case "$OS_TYPE" in
      macos)
        if command -v brew >/dev/null 2>&1; then
          brew install "${packages[@]}"
        else
          echo "❌ Homebrew not found. Please install it first:"
          echo "   /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
          return 1
        fi
        ;;
      linux)
        sudo apt update && sudo apt install -y "${packages[@]}"
        ;;
      ,*)
        echo "❌ Unknown OS type. Please install packages manually: ${packages[*]}"
        ;;
    esac
  fi

  # Install Oh My Zsh if not present
  if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    echo "📦 Installing Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    export ZSH="$HOME/.oh-my-zsh"
  fi

  # Install Zsh plugins
  if [[ -d "$ZSH" ]]; then
    if [[ ! -d "$ZSH/custom/plugins/zsh-autosuggestions" ]]; then
      echo "📦 Installing zsh-autosuggestions..."
      git clone https://github.com/zsh-users/zsh-autosuggestions "$ZSH/custom/plugins/zsh-autosuggestions"
    fi

    if [[ ! -d "$ZSH/custom/plugins/zsh-syntax-highlighting" ]]; then
      echo "📦 Installing zsh-syntax-highlighting..."
      git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$ZSH/custom/plugins/zsh-syntax-highlighting"
    fi

    if [[ ! -d "$ZSH/custom/themes/powerlevel10k" ]]; then
      echo "📦 Installing powerlevel10k theme..."
      git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$ZSH/custom/themes/powerlevel10k"
    fi
  fi

  # Linux-specific Python tools (excluded on macOS)
  if [[ "$OS_TYPE" != "macos" ]]; then
    if command -v pip >/dev/null 2>&1; then
      ! command -v yt-dlp >/dev/null 2>&1 && echo "📦 Installing yt-dlp..." && pip install --user yt-dlp
      ! command -v gallery-dl >/dev/null 2>&1 && echo "📦 Installing gallery-dl..." && pip install --user gallery-dl
    fi
  fi

  # Install uv (Python package manager)
  if ! command -v uv >/dev/null 2>&1; then
    echo "📦 Installing uv..."
    curl -LsSf https://astral.sh/uv/install.sh | sh
  fi

  echo "✅ Dependency installation completed!"
  echo "🔄 Please restart your terminal or run 'source ~/.zshrc' to apply changes"
}

setup-literate-config() {
  echo "🚀 Setting up literate configuration environment..."

  # Check current directory
  if [[ ! -f "$(pwd)/Makefile" ]] || [[ ! -f "$(pwd)/doom-config.org" ]]; then
    echo "❌ Please run this from the literate-config directory"
    return 1
  fi

  # Install dependencies
  install-dependencies

  # Ask user about dotfiles setup
  echo ""
  echo "🔗 Dotfiles Management Setup:"
  echo "1) Basic backup system (current)"
  echo "2) Enhanced dotfiles with symlinks (recommended)"
  echo -n "Choose setup method (1-2): "
  read -r choice

  case $choice in
    1)
      echo "📦 Setting up basic backup system..."
      config-backup
      ;;
    2)
      echo "🔗 Setting up enhanced dotfiles system..."
      config-init-dotfiles
      echo ""
      echo "💡 Run 'make all-safe' to generate configs, then 'config-sync-to-dotfiles' to sync"
      ;;
    ,*)
      echo "❌ Invalid choice, using basic backup system..."
      config-backup
      ;;
  esac

  # Validate current setup
  echo "🔍 Validating setup..."
  validate-zsh-config

  if command -v doom >/dev/null 2>&1 || [[ -x "$HOME/.config/emacs/bin/doom" ]]; then
    validate-doom-config
  else
    echo "⚠️  Doom Emacs not found. Install it first if you plan to use Emacs."
  fi

  echo ""
  echo "✅ Literate configuration setup completed!"
  echo "💡 Use 'make all-safe' to tangle configurations"
  echo "💡 Use 'config-status' to check your setup"
  echo "💡 Use 'SPC r d' in Emacs to reload with the enhanced function"
}

# Enhanced reload workflow that integrates with dotfiles
config-enhanced-reload() {
  echo "🚀 Enhanced configuration reload with dotfiles integration..."

  local dotfiles_dir="$HOME/.dotfiles"
  local config_source="$HOME/org/literate-config"

  # Step 1: Backup current state
  echo "📦 Creating backup..."
  config-backup

  # Step 2: Generate new configs
  echo "🔧 Generating configurations..."
  cd "$config_source"
  make all-safe

  # Step 3: Handle dotfiles integration
  if [[ -d "$dotfiles_dir/.git" ]]; then
    echo "🔗 Syncing to dotfiles repository..."
    config-sync-to-dotfiles
    echo "🔗 Recreating symlinks..."
    config-create-symlinks
  else
    echo "ℹ️  No dotfiles repository found (using direct file management)"
  fi

  # Step 4: Validate
  echo "🔍 Validating new configuration..."
  if validate-zsh-config; then
    echo "✅ Zsh configuration validated"
  else
    echo "❌ Zsh validation failed"
    return 1
  fi

  if command -v doom >/dev/null 2>&1 || [[ -x "$HOME/.config/emacs/bin/doom" ]]; then
    if validate-doom-config; then
      echo "✅ Doom configuration validated"
    else
      echo "❌ Doom validation failed"
      return 1
    fi
  fi

  echo "✅ Enhanced reload completed successfully!"
  echo "🔄 Reload your shell: source ~/.zshrc or restart terminal"
}

#+end_src

---

** Linux-specific Functions (Generated conditionally)

This section generates a separate `.zsh_functions` file only when the OS is not macOS.
Contains multimedia download functions that require Linux-specific tools.

#+PROPERTY: header-args :results none
#+begin_src shell :tangle (if (string= (or (getenv "OS_TYPE") "unknown") "macos") "no" "~/.zsh_functions")
# Linux-specific functions (excluded on macOS)
# This file is generated conditionally by the literate config

# Video/media download function with support for various platforms
download_video() {
  local url=$1
  local output_filename=$2
  local output_dir=~/Downloads/videos
  
  if [[ -z "$url" ]]; then
    echo "❌ Usage: download_video <url> [filename]"
    echo "Supports: YouTube, Twitter/X, Instagram, DeviantArt, and more"
    return 1
  fi
  
  mkdir -p "$output_dir"

  case "$url" in
    *instagram.com*|*deviantart.com*)
      if ! command -v gallery-dl >/dev/null 2>&1; then
        echo "❌ gallery-dl not found. Install with: pip install gallery-dl"
        return 1
      fi
      cookies_file=~/Documents/cookies.instagram.txt
      if [[ -n "$output_filename" ]]; then
        gallery-dl --cookies "${cookies_file}" \
                 --output "$output_dir/${output_filename}.%(extension)s" "$url"
      else
        gallery-dl --cookies "${cookies_file}" \
                 --output "$output_dir/%(title)s.%(extension)s" "$url"
      fi
      ;;
    *x.com*|*twitter.com*)
      if ! command -v yt-dlp >/dev/null 2>&1; then
        echo "❌ yt-dlp not found. Install with: pip install yt-dlp"
        return 1
      fi
      cookies_file=~/Documents/cookies.twitter.txt
      if [[ -n "$output_filename" ]]; then
        yt-dlp --cookies "${cookies_file}" -o "${output_dir}/${output_filename}.%(ext)s" "$url"
      else
        yt-dlp --cookies "${cookies_file}" -o "${output_dir}/%(title)s.%(ext)s" "$url"
      fi
      ;;
    *)
      if ! command -v yt-dlp >/dev/null 2>&1; then
        echo "❌ yt-dlp not found. Install with: pip install yt-dlp"
        return 1
      fi
      if [[ -n "$output_filename" ]]; then
        yt-dlp -o "${output_dir}/${output_filename}.%(ext)s" "$url"
      else
        yt-dlp -o "${output_dir}/%(title)s.%(ext)s" "$url"
      fi
      ;;
  esac
  
  echo "✅ Download completed to: $output_dir"
}

# Alias for convenience
alias yt='download_video'
#+end_src

---

** Powerlevel10k configuration

(p10k configuration is generated automatically, no need to tangle)

- File: `~/.p10k.zsh`
- If you need to regenerate it:

#+PROPERTY: header-args :results none
#+begin_src shell
#p10k configure
#+end_src

---

** Notes

- You can add additional sections like Functions, Exports, or Custom Keybindings later.
- `.p10k.zsh` is handled separately to avoid manual conflicts.
- Always reload with:

#+PROPERTY: header-args :results none
#+begin_src shell
source ~/.zshrc
#+end_src

Happy hacking! 🚀
