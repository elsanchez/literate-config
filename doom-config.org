* Doom Emacs Configuration
This is a literate configuration combining your `init.el`, `config.el`, `packages.el`, and `custom.el`.

** COMMENT init.el
#+PROPERTY: header-args :results none
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       ;;company           ; the ultimate code completion backend
       (corfu +orderless)  ; complete with cap(f), cape and a flying feather!
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
      .config/doomashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       (format)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;eww               ; the internet is gross
       ;;ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       lookup              ; navigate your code and its documentation
       ;;lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;graphviz          ; diagrams for confusing yourself even more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader

       :config
       ;;literate
       (default +bindings +smartparens))

#+END_SRC

** config.el
#+PROPERTY: header-args :results none
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el

;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Alejandro Sanchez"
      user-mail-address "alejandrosanchez@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:

(setq initial-frame-alist
      '((top . 0)
        (left . 0)
        (width . 200)     ;; columnas
        (height . 60)))   ;; líneas

(setq default-frame-alist initial-frame-alist)
;;(add-hook! 'window-setup-hook #'toggle-frame-maximized)

(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 16)
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font" :size 16)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 24))


(setq doom-theme 'doom-nord)

(setq confirm-kill-emacs nil)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; Save buffer
(global-set-key (kbd "M-s") #'save-buffer)

(use-package! org-roam
  :init
  (setq org-roam-directory (file-truename "~/org/roam"))
  :custom
  (org-roam-completion-everywhere t)
  :config
  (org-roam-db-autosync-mode))

(map! :leader
      :prefix "n"
      :desc "Find node"        "r" #'org-roam-node-find
      :desc "Insert node"      "i" #'org-roam-node-insert
      :desc "Org Roam buffer"  "b" #'org-roam-buffer-toggle)


;; (use-package! org-roam
;;   :after org
;;   :custom
;;   (org-roam-directory "~/org/")
;;   :config
;;   (org-roam-setup))

(defun my/paste-from-android-clipboard ()
  "Pega desde el clipboard de Android usando termux-api."
  (interactive)
  (let ((clip (shell-command-to-string "termux-clipboard-get")))
    (insert (string-trim-right clip))))

(defun my/copy-to-android-clipboard (start end)
  "Copia la región al clipboard de Android."
  (interactive "r")
  (shell-command-on-region start end "termux-clipboard-set"))

(map! "M-p" #'my/paste-from-android-clipboard)
(map! "M-s" #'save-buffer)
(map! "M-y" #'my/copy-to-android-clipboard)

(add-to-list 'load-path (expand-file-name "lisp" doom-user-dir))
(require 'log-timestamps)

(defun elsanchez/doom-reload-config ()
  "Tangle config, doom sync, restart Emacs daemon, and open a new frame."
  (interactive)
  (let* ((doom-bin (or (executable-find "doom")
                       (expand-file-name "~/.config/emacs/bin/doom"))) ;; fallback
         (cmd (if (and doom-bin (file-executable-p doom-bin))
                  (format "make && %s sync" doom-bin)
                (user-error "Cannot find Doom binary!"))))
    (let ((default-directory "~/org/literate-config/"))
      (compile cmd)))
  (when (y-or-n-p "Restart Emacs daemon and open new client?")
    (start-process-shell-command
     "restart-emacs-daemon" nil
     "systemctl --user restart emacs && sleep 2 && emacsclient -c"))
  (message "✅ Doom config updated, Emacs restarted and frame opened!"))

(map! :leader
      :desc "Recargar literate config + doom sync + restart daemon"
      "r d" #'elsanchez/doom-reload-config)

;; Opcional: asegurar que se use Zsh como shell para sh-mode
(after! sh-script
  (setq sh-shell "zsh"))

(setq treemacs-position 'right)  ; Abre en el lado derecho

(after! projectile
  (add-hook 'projectile-after-switch-project-hook #'treemacs-add-and-display-current-project-exclusively))


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+END_SRC

#+RESULTS:
: elsanchez/doom-reload-config

*** Formatting
**** Shell scripts
#+PROPERTY: header-args :results none
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el


(use-package! apheleia
  :config
  (apheleia-global-mode 1)

  (setf (alist-get 'shfmt apheleia-formatters)
        '("shfmt" "-i" "2" "-ci" "-ln=zsh"))

  (setf (alist-get 'sh-mode apheleia-mode-alist)
        'shfmt)

  (defun my/format-org-src-blocks-with-apheleia ()
    "Format source blocks in Org using Apheleia."
    (when (eq major-mode 'org-mode)
      (org-element-map (org-element-parse-buffer) 'src-block
        (lambda (src-block)
          (let* ((lang (org-element-property :language src-block))
                 (beg (org-element-property :begin src-block)))
            (when (assoc (intern lang) apheleia-mode-alist)
              (save-excursion
                (goto-char beg)
                (org-edit-special)
                (when (apheleia--buffer-supported-p)
                  (apheleia-format-buffer))
                (org-edit-src-exit))))))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'before-save-hook
                        #'my/format-org-src-blocks-with-apheleia
                        nil t))))

(defun elsanchez/disable-apheleia-for-zshrc ()
  (when (and buffer-file-name
             (string-match-p "\\.zshrc\\'" buffer-file-name))
    (apheleia-mode -1)))

(defun my/org-babel-format-on-save ()
  "Auto-indent org babel blocks on save."
  (when (derived-mode-p 'org-mode)
    (org-babel-map-src-blocks nil
      (let* ((info (org-babel-get-src-block-info t))
             (lang (nth 0 info)))
        (when (member lang '("emacs-lisp" "sh" "bash" "zsh" "python" "elisp"))
          (save-excursion
            (org-babel-do-key-sequence-in-edit-buffer (kbd "C-c '"))
            (when (fboundp 'eglot-format-buffer)
              (eglot-format-buffer))
            (org-edit-src-exit)))))))

(add-hook 'before-save-hook #'my/org-babel-format-on-save)

(add-hook 'sh-mode-hook #'elsanchez/disable-apheleia-for-zshrc)

(defun my/org-babel-format-src-blocks ()
  "Format all source blocks in the current org buffer."
  (interactive)
  (org-babel-map-src-blocks nil
    (let* ((info (org-babel-get-src-block-info t))
           (lang (nth 0 info)))
      (when (member lang '("sh" "bash" "zsh" "emacs-lisp" "python"))
        (let ((edit-buffer (org-edit-src-code)))
          (with-current-buffer edit-buffer
            (indent-region (point-min) (point-max)))
          (org-edit-src-exit))))))

(add-hook 'before-save-hook
          (lambda ()
            (when (derived-mode-p 'org-mode)
              (my/org-babel-format-src-blocks))))


#+END_SRC

#+RESULTS:
| elsanchez/disable-apheleia-for-zshrc | evil-collection-sh-script-set-evil-shift-width | rainbow-delimiters-mode | +sh-init-extra-fontification-h | +lookup--init-sh-mode-handlers-h | +electric--init-sh-mode-h | sh-electric-here-document-mode |


*** Doom Startup Settings
**** Doom fallback buffer and dashboard
#+PROPERTY: header-args :results none
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
;; Make Doom start in the dashboard when launching without files
(setq doom-fallback-buffer-name "*doom*"
      +doom-dashboard-name "*doom*"
      +doom-dashboard-pwd-policy 'use-home)
+
;; Make sure Emacsclient opens a clean frame properly
(setq server-client-instructions nil) ;; No annoying message when opening new emacsclient frames
#+END_SRC

#+RESULTS:

**** Clean up workspaces on startup
#+PROPERTY: header-args :results none
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(setq treemacs-position 'right)  ; Abre en el lado derecho

(after! projectile
  (add-hook 'projectile-after-switch-project-hook #'treemacs-add-and-display-current-project-exclusively))

(defun elsanchez/cleanup-workspaces-on-startup ()
  "Delete all extra workspaces if Emacs started without files."
  (when (and (bound-and-true-p persp-mode)
             (= (length (persp-names)) 1) ;; Only *scratch* or *doom*
             (get-buffer "*doom*"))
    (+workspace/delete-other)))

(add-hook 'emacs-startup-hook #'elsanchez/cleanup-workspaces-on-startup)
#+END_SRC

#+RESULTS:
| elsanchez/cleanup-workspaces-on-startup |

** packages.el
#+PROPERTY: header-args :results none
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or

(package! ws-butler :recipe (:host github :repo "lewang/ws-butler"))
(package! org-roam)
(package! apheleia)
;;(package! ws-butler :disable t)
;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;; (package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;; (package! another-package
;;   :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;; (package! this-package
;;   :recipe (:host github :repo "username/repo"
;;            :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;; (package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;; (package! builtin-package :recipe (:nonrecursive t))
;; (package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;; (package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;; (package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;; (unpin! pinned-package)
;; ...or multiple packages
;; (unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;; (unpin! t)

#+END_SRC

** custom.el
#+PROPERTY: header-args :results none
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/custom.el
;;; -*- lexical-binding: t -*-
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("34cf3305b35e3a8132a0b1bdf2c67623bc2cb05b125f8d7d26bd51fd16d547ec" default))
 '(package-selected-packages
   '(all-the-icons-nerd-fonts treemacs-all-the-icons all-the-icons gptel gptel-aibo org-roam org-roam-ui)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+END_SRC

** lisp/log-timestamps.el
#+PROPERTY: header-args :results none
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/lisp/log-timestamps.el
;;; log-timestamps.el --- Highlight epoch timestamps in human-readable form -*- lexical-binding: t; -*-

;;; Commentary:
;; Minor mode to detect and overlay 13-digit millisecond timestamps with human-readable UTC dates.
;; Integrated with Doom Emacs keybindings using SPC t.

;;; Code:

(defgroup log-timestamps nil
  "Overlay millisecond timestamps with human-readable time."
  :group 'convenience)

(defcustom log-timestamps-regex "\\b1[0-9]\\{12\\}\\b"
  "Regular expression to match millisecond timestamps."
  :type 'regexp
  :group 'log-timestamps)

(defun log-timestamps--millis-to-date (s)
  "Convert millisecond timestamp S (string) to human-readable date."
  (let ((ts (/ (string-to-number s) 1000)))
    (format-time-string " → %Y-%m-%d %H:%M:%S" (seconds-to-time ts))))

(defun log-timestamps--apply-overlays ()
  "Apply overlays to all matching timestamps in the current buffer."
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward log-timestamps-regex nil t)
      (let* ((start (match-beginning 0))
             (end (match-end 0))
             (text (match-string 0))
             (ov (make-overlay end end)))
        (overlay-put ov 'after-string
                     (propertize (log-timestamps--millis-to-date text)
                                 'face 'font-lock-comment-face))
        (overlay-put ov 'log-timestamps t)))))

(defun log-timestamps-clear-overlays ()
  "Clear all overlays added by log-timestamps."
  (interactive)
  (remove-overlays (point-min) (point-max) 'log-timestamps t))

(defun log-timestamps-refresh ()
  "Refresh overlays by clearing and reapplying them."
  (interactive)
  (log-timestamps-clear-overlays)
  (log-timestamps--apply-overlays))

(defun log-timestamps--after-change (_beg _end _len)
  "Hook to refresh overlays after buffer changes."
  (when log-timestamps-mode
    (log-timestamps-refresh)))

;;;###autoload
(define-minor-mode log-timestamps-mode
  "Minor mode to overlay 13-digit millisecond timestamps with readable dates."
  :lighter " ⏱"
  (if log-timestamps-mode
      (progn
        (log-timestamps--apply-overlays)
        (add-hook 'after-change-functions #'log-timestamps--after-change nil t))
    (log-timestamps-clear-overlays)
    (remove-hook 'after-change-functions #'log-timestamps--after-change t)))

;;;###autoload
(defun log-timestamps-enable-in-buffer ()
  "Enable log-timestamps mode in the current buffer."
  (log-timestamps-mode 1))

;;;autoload
(defun log-timestamps-replace-in-buffer ()
  "Replace 13-digit millisecond timestamps with human-readable dates in the current buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((regex "\\b1[0-9]\\{12\\}\\b"))
      (while (re-search-forward regex nil t)
        (let* ((raw (match-string 0))
               (secs (/ (string-to-number raw) 1000))
               (date (format-time-string "%Y-%m-%d %H:%M:%S" (seconds-to-time secs))))
          (replace-match date t t))))))

;; Auto-enable in common modes
(dolist (hook '(json-mode-hook
                org-mode-hook
                logview-mode-hook
                prog-mode-hook))
  (add-hook hook #'log-timestamps-enable-in-buffer))

(add-hook 'csv-mode-hook
          (lambda ()
            (when (y-or-n-p "Reemplazar timestamps por fechas legibles?")
              (log-timestamps-replace-in-buffer))))

;; Doom Emacs keybindings (SPC t)
(when (featurep 'evil) ; Only define if Doom/general.el is available
  (with-eval-after-load 'general
    (general-define-key
     :states '(normal visual)
     :prefix "SPC"
     :non-normal-prefix "M-SPC"
     :keymaps 'override
     "t T" '(log-timestamps-mode :which-key "toggle timestamp overlay")
     "t r" '(log-timestamps-refresh :which-key "refresh overlays")
     "t c" '(log-timestamps-clear-overlays :which-key "clear overlays"))))

(provide 'log-timestamps)
;;; log-timestamps.el ends here

;; Activar automáticamente en ciertos modos
(dolist (hook '(json-mode-hook
                logview-mode-hook
                prog-mode-hook
                org-mode-hook))
  (add-hook hook #'log-timestamps-mode))

(add-hook 'csv-mode-hook
          (lambda ()
            (when (y-or-n-p "Replace timestamps with human readable dates?")
              (log-timestamps-replace-in-buffer))))
(map! :mode csv-mode
      :leader
      :desc "Replace timestamps with date"
      "t R" #'log-timestamps-replace-in-buffer)

#+END_SRC
